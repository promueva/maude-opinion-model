***(
 
 Analysis with DeGroot model extended with Cognitive Biases as proposed in 

MÃ¡rio S. Alvim, Artur Gaspar da Silva, Sophia Knight, Frank Valencia: A
Multi-agent Model for Opinion Evolution in Social Networks Under Cognitive
Biases. FORTE 2024: 3-19

The values of the network are taken from the above paper. The different
scenarios can be analyzed by replacing the function beta with the definitions
given in the end of the file.

***)

load semantics .

mod VACCINES is
    pr REW-RELATION-UPDATE . 
    eq EPSILON = 0.00001 .
    subsort Nat < Agent .


    vars S L R : State .

    op nodes   : -> SetOpinion .
    op edges   : -> SetEdge .
    op initnet : -> Network .

    eq nodes = < 1 : [ 1.0 ] >, < 2 : [ 0.9 ] >, < 3 : [ 0.8 ] >, < 4 : [ 0.2 ] >, < 5 : [ 0.1 ] >, < 6 : [ 0.0 ] > .
    eq edges = < ( 6 , 1) : 1.0 > ,
               < ( 1 , 2) : 0.6 > ,
               < ( 2 , 1) : 0.6 > ,
               < ( 2 , 4) : 0.4 > ,
               < ( 4 , 6) : 0.4 > ,
               < ( 4 , 3) : 0.2 > ,
               < ( 3 , 4) : 0.2 > ,
               < ( 1 , 3) : 0.4 > ,
               < ( 3 , 5) : 0.6 > ,
               < ( 5 , 6) : 0.6 > ,
               --- Self loops
               < (1 , 1) : 1.0 >,
               < (2 , 2) : 1.0 > ,
               < (3 , 3) : 1.0 > ,
               < (4 , 4) : 1.0 > ,
               < (5 , 5) : 1.0 > ,
               < (6 , 6) : 1.0 > .

    eq initnet =  < nodes: nodes ; edges: edges >  .

    op init : -> State .
    eq init =  initnet  in step: 0 comm: 0 edge-sel: empty .
endm

mod MODEL is
    pr VACCINES .

    eq moduleName = 'MODEL .
    eq model = deGroot .
    eq update(STATE, SETEDGE, AG) = update-beta(STATE, SETEDGE, AG) .

    --- --------------------
    var STATE        : State .
    var SETEDGE      : SetEdge .
    vars AG AG'      : Agent .
    var R            : Float .
    --- --------------------

    --- ----------------------------------
    --- Figure (a) 
    eq beta(2,1,R) = fan(R) .
    eq beta(1,6,R) = backf(R) .
    eq beta(4,2,R) = id(R) .
    eq beta(1,2,R) = id(R) .
    eq beta(AG, AG', R) = conf(R) [owise] .
    --- ----------------------------------


endm

eof
search [1]  init =>* STATE such that consensus(STATE) .

    --- Figure (a) 
    eq beta(2,1,R) = fan(R) .
    eq beta(1,6,R) = backf(R) .
    eq beta(4,2,R) = id(R) .
    eq beta(1,2,R) = id(R) .
    eq beta(AG, AG', R) = conf(R) [owise] .

    --- Figure (b) (no consensus but stability is reached) 
    --- rew [1000] init .
    eq beta(2,1,R) = fan(R) .
    eq beta(1,6,R) = backf(R) .
    eq beta(5,3,R) = backf(R) .
    eq beta(6,5,R) = id(R) .
    eq beta(6,4,R) = id(R) .
    eq beta(AG, AG', R) = conf(R) [owise] .

    --- Figure (c) (no consensus, nor stability) 
    --- rew [1000] init .
    eq beta(5, 3, R) = fan(R) .
    eq beta(4, 3, R) = backf(R) .
    eq beta(6, 5, R) = id(R) .
    eq beta(1, 6, R) = id(R) .
    eq beta(AG, AG', R) = conf(R) [owise] .

    --- Figure (d) (consensus is reached) 
    eq beta(AG, AG', R) = id(R) .

    --- Figure (e) (no consensus, nor stability) 
    eq beta(AG, AG', R) = fan(R) .

    --- Figure (f) (stability is reached but no consensus) 
    eq beta(AG, AG', R) = backf(R) .

    --- Figure (g) (consensus is reached) 
    eq beta(AG, AG', R) = conf(R) .
