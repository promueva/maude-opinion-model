***(
 
 Analysis with DeGroot model extended with Cognitive Biases as proposed in 

MÃ¡rio S. Alvim, Artur Gaspar da Silva, Sophia Knight, Frank Valencia: A
Multi-agent Model for Opinion Evolution in Social Networks Under Cognitive
Biases. FORTE 2024: 3-19

***)

load semantics .

mod VACCINES is
    pr REW-RELATION-UPDATE . 
    eq EPSILON = 0.00001 .
    subsort Nat < Agent .


    vars S L R : State .

    op nodes   : -> SetOpinion .
    op edges   : -> SetEdge .
    op initnet : -> Network .

    eq nodes = < 1 : 1.0 >, < 2 : 0.9 >, < 3 : 0.8 >, < 4 : 0.2 >, < 5 : 0.1 >, < 6  : 0.0 > .
    eq edges = < ( 6 , 1) : 1.0 > ,
               < ( 1 , 2) : 0.6 > ,
               < ( 2 , 1) : 0.6 > ,
               < ( 2 , 4) : 0.4 > ,
               < ( 4 , 6) : 0.4 > ,
               < ( 4 , 3) : 0.2 > ,
               < ( 3 , 4) : 0.2 > ,
               < ( 1 , 3) : 0.4 > ,
               < ( 3 , 5) : 0.6 > ,
               < ( 5 , 6) : 0.6 > ,
               --- Self loops
               < (1 , 1) : 1.0 >,
               < (2 , 2) : 1.0 > ,
               < (3 , 3) : 1.0 > ,
               < (4 , 4) : 1.0 > ,
               < (5 , 5) : 1.0 > ,
               < (6 , 6) : 1.0 > .

    eq initnet =  < nodes: nodes ; edges: edges >  .

    op init : -> State .
    eq init =  initnet  in step: 0 comm: 0 strat: empty .
endm

mod TEST is
    pr VACCINES .

    --- --------------------
    var STATE        : State .
    var SETEDGE      : SetEdge .
    var SETEDGE'     : SetEdge .
    vars AG AG' AG'' : Agent .
    var EDGE         : Edge .
    var SUM          : Float .
    vars R W         : Float .
    var NNODES       : SetOpinion .
    var NETWORK      : Network .
    vars PHI PHI'    : Float .
    var STEPS        : Nat .
    var COMM         : Nat .
    var EDGES        : SetEdge .
    var  SUMW        : Float .
    --- --------------------

    eq moduleName = 'TEST .
    eq model = deGroot .
    eq update(STATE, SETEDGE, AG) = update-beta(STATE, SETEDGE, AG) .

    --- ou + sum ( overline(ivu) beta uv(ov - ou))
    op update-beta : State SetEdge Agent -> Float .  
    ceq update-beta(NETWORK  in step: STEPS comm: COMM strat: EDGES, SETEDGE, AG ) = 
                clamp(opinion(AG,  NETWORK  in step: STEPS comm: COMM strat: EDGES) + SUM)
    if 
       SUM := prod-diff(AG, nodes( NETWORK  in step: STEPS comm: COMM strat: EDGES ), SETEDGE) 
       .


    op beta : Agent Agent Float -> Float .

    --- -----------------------
    --- -----------------------
    --- Figure (a)
    eq beta(2,1,R) = fan(R) .
    eq beta(1,6,R) = backf(R) .
    eq beta(5,3,R) = backf(R) .
    eq beta(6,5,R) = id(R) .
    eq beta(6,4,R) = id(R) .
    eq beta(AG, AG', R) = conf(R) [owise] .

    --- -----------------------


    op fan : Float -> Float . 
    eq fan(R) = if R == 0.0 then 0.0 else R / abs(R) fi .
    op backf : Float -> Float . 
    eq backf(R) = -1.0 * R * R * R .
    op id : Float -> Float . 
    eq id(R) = R .
    op conf : Float -> Float . 
    eq conf(R) = R * (1.0001 - abs(R)) / (1.0001) .

    op prod-diff : Agent SetOpinion SetEdge -> Float .
    op prod-diff : Agent SetOpinion SetEdge SetEdge Float -> Float .
    eq prod-diff(AG, NNODES, SETEDGE) = prod-diff(AG, NNODES , SETEDGE, SETEDGE, 0.0)  .
    eq prod-diff(AG, NNODES, empty, SETEDGE', SUMW) = SUMW .
    eq prod-diff(AG, (NNODES, < AG : PHI > ,  < AG' :  PHI' > ), ( < (AG', AG ) :  W  >   ,SETEDGE), SETEDGE', SUMW) = 
       prod-diff(AG, (NNODES, < AG : PHI > ,  < AG' :  PHI' > ),                           SETEDGE , SETEDGE', SUMW + beta(AG, AG', PHI' - PHI) * prop-inf(AG, SETEDGE', W ) ) .
    eq prod-diff(AG, NNODES, ( < (AG' , AG'') :  W  >   ,SETEDGE), SETEDGE', SUMW) = 
       prod-diff(AG, NNODES,                             SETEDGE,  SETEDGE', SUMW) [owise] .


    op prop-inf : Agent  SetEdge Float  -> Float .
    eq prop-inf(AG, SETEDGE, W) =  W / sum-W(AG, SETEDGE) .


endm

eof

    --- Figure (a)
    eq beta(2,1,R) = fan(R) .
    eq beta(1,6,R) = backf(R) .
    eq beta(4,2,R) = id(R) .
    eq beta(1,2,R) = id(R) .
    eq beta(AG, AG', R) = conf(R) [owise] .

    --- Figure (b)
    eq beta(2,1,R) = fan(R) .
    eq beta(1,6,R) = backf(R) .
    eq beta(5,3,R) = backf(R) .
    eq beta(6,5,R) = id(R) .
    eq beta(6,4,R) = id(R) .
    eq beta(AG, AG', R) = conf(R) [owise] .

    --- Figure (c)
    eq beta(5, 3, R) = fan(R) .
    eq beta(4, 3, R) = backf(R) .
    eq beta(6, 5, R) = id(R) .
    eq beta(1, 6, R) = id(R) .
    eq beta(AG, AG', R) = conf(R) [owise] .

    --- Figure (d)
    eq beta(AG, AG', R) = id(R) .

    --- Figure (e)
    eq beta(AG, AG', R) = fan(R) .

    --- Figure (f)
    eq beta(AG, AG', R) = backf(R) .

    --- Figure (g)
    eq beta(AG, AG', R) = conf(R) .


